{"version":3,"sources":["services/index.js","store/actions/index.js","utils/api-routes.js","utils/helpers.js","types/pocket.js","components/exchange-pocket/index.js","components/exchange-widget/index.js","App.js","store/reducers/index.js","store/pockets-data.js","index.js"],"names":["intervalId","exchange","pocketFrom","pocketTo","type","totalFrom","totalTo","selectPocketFrom","pocket","selectPocketTo","fetchRates","baseCurrency","dispatch","clearInterval","setInterval","fetch","then","res","json","rates","catch","err","console","error","tryConvert","amount","convert","rounded","parseToTwoDecimal","parseFloat","Number","isNaN","toString","string","number","toFixed","getExchangeRate","currency","min","max","Math","random","shape","id","isRequired","name","ExchangePocket","handleAmountChange","e","props","onValueChange","target","value","handlePocketChange","selectedPocket","pockets","find","onPocketChange","this","total","isFromPocket","label","action","className","data-testid","toUpperCase","FormControl","InputLabel","Select","labelId","onChange","map","MenuItem","key","React","Component","_ExchangeWidget","handlePocketFromChange","handlePocketToChange","handleAmountFromChange","setState","isFromPersistent","handleAmountToChange","state","exchangeRate","amountFrom","a","amountTo","canExchange","Button","variant","color","disabled","onClick","ExchangeWidget","connect","bindActionCreators","App","initialState","reducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.465449a3.chunk.js","sourcesContent":["import {API_URI, LATEST_URI} from '../utils/api-routes';\nimport {receiveRates} from '../store/actions';\n\nlet intervalId;\nconst FETCH_RATES_TIME_INTERVAL = 1000; // can be changed to 10 000 to meet requirements\n\nexport const fetchRates = baseCurrency => dispatch => {\n  if (intervalId) {\n    clearInterval(intervalId);\n  }\n  intervalId = setInterval(() => {\n    fetch(`${API_URI}${LATEST_URI}?base=${baseCurrency}`)\n        .then(res => res.json())\n        .then(res => dispatch(receiveRates(res.rates)))\n        // TODO: handle errors, redirect to the error page \\ show notification, log the error\n        .catch(err => {\n          console.error(err);\n        });\n  }, FETCH_RATES_TIME_INTERVAL);\n};\n","export const RECEIVE_RATES = 'RECEIVE_RATES';\nexport const SELECT_POCKET_FROM = 'SELECT_POCKET_FROM';\nexport const SELECT_POCKET_TO = 'SELECT_POCKET_TO';\nexport const EXCHANGE = 'EXCHANGE';\n\nexport const exchange = ({pocketFrom, pocketTo, totalFrom, totalTo}) => ({\n  // TODO: make an API call, show some snackbar on response\n  type: EXCHANGE,\n  pocketFrom,\n  totalFrom,\n  pocketTo,\n  totalTo,\n});\n\nexport const selectPocketFrom = pocket => ({\n  type: SELECT_POCKET_FROM,\n  pocket,\n});\n\nexport const selectPocketTo = pocket => ({\n  type: SELECT_POCKET_TO,\n  pocket,\n});\n\nexport const receiveRates = rates => ({\n  type: RECEIVE_RATES,\n  rates,\n});\n","export const API_URI = 'https://api.exchangeratesapi.io';\nexport const LATEST_URI = '/latest';\n","const INPUT_DEFAULT = '0.00';\n\nexport function tryConvert(amount, convert) {\n  const input = parseFloat(amount);\n  const output = convert(input);\n  const rounded = parseToTwoDecimal(output);\n  return Number.isNaN(rounded) ? INPUT_DEFAULT : rounded.toString();\n}\n\nexport function parseToTwoDecimal(string) {\n  // have to parseFloat second time as far .toFixed returns a string\n  const number = parseFloat(parseFloat(string).toFixed(2));\n  return Number.isNaN(number) ? 0.00 : number;\n}\n\nexport function getRandomNumber(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n// TODO: handle a case if there is no exchange rate for selected currency, redirect to error page or show some notification.\n// for now just set rate to 1\n// multiply by some random number to emulate rate changes\nexport const getExchangeRate = (rates, currency) =>\n  ((rates && rates[currency]) * getRandomNumber(0.9, 1.1)) || 1;\n","import {shape, number, string} from 'prop-types';\n\nexport const pocketType = shape({\n  id: string.isRequired,\n  name: string.isRequired,\n  currency: string.isRequired,\n  amount: number.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport {pocketType} from '../../types';\nimport './styles.css';\n\nexport const amountInputTestId = 'amount-input';\nexport const calculationTestId = 'calculation';\nexport const labelTestId = 'label';\n\nclass ExchangePocket extends React.Component {\n  handleAmountChange = (e) => {\n    this.props.onValueChange(e.target.value);\n  }\n\n  handlePocketChange = (e) => {\n    const selectedPocket = this.props.pockets.find(pocket => pocket.id === e.target.value);\n    this.props.onPocketChange(selectedPocket);\n  }\n\n  render() {\n    const {amount, total, pockets, isFromPocket, selectedPocket} = this.props;\n\n    const label = isFromPocket ? 'from' : 'to';\n    const action = isFromPocket ? '-' : '+';\n\n    return (\n      <div className=\"pocket\" data-testid={`pocket-${label}`}>\n        <div className=\"label\" data-testid={labelTestId}>{label.toUpperCase()}</div>\n\n        <FormControl>\n          <InputLabel id=\"pocket\">{label} pocket </InputLabel>\n          <Select\n            labelId=\"pocket\"\n            className=\"select\"\n            value={selectedPocket.id || ''}\n            onChange={this.handlePocketChange}\n          >\n            {pockets.map(pocket => (\n              <MenuItem value={pocket.id} key={pocket.id}>{ pocket.name }</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n\n        <div className=\"amount\">\n          <input\n            className=\"amount-input\"\n            type=\"number\"\n            value={amount}\n            min=\"0\"\n            onChange={this.handleAmountChange}\n            data-testid={amountInputTestId}\n          />\n          <span className=\"amount-currency\">{selectedPocket.currency}</span>\n        </div>\n\n        <div className=\"calculation\" data-testid={calculationTestId}>\n          <span>{selectedPocket.amount || 0}</span>\n          <span className={`diff${action}`}> {action} {amount || 0}</span>\n          <span className={`diff${action} total`}> = {total}</span>\n          <span>{selectedPocket.currency}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nExchangePocket.propTypes = {\n  pockets: PropTypes.arrayOf(pocketType),\n  selectedPocket: PropTypes.oneOfType([pocketType, PropTypes.shape({})]),\n  isFromPocket: PropTypes.bool,\n  amount: PropTypes.string,\n  total: PropTypes.number,\n  onValueChange: PropTypes.func,\n  onPocketChange: PropTypes.func,\n};\n\nexport default ExchangePocket;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport Button from '@material-ui/core/Button';\nimport {fetchRates} from '../../services';\nimport {tryConvert, parseToTwoDecimal} from '../../utils/helpers';\nimport {\n  exchange,\n  selectPocketFrom,\n  selectPocketTo,\n} from '../../store/actions';\nimport {pocketType} from '../../types';\nimport ExchangePocket from '../exchange-pocket';\nimport './styles.css';\n\nexport const exchangeButtonTestId = 'exchange';\n\nclass _ExchangeWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {amount: '0.00', isFromPersistent: true};\n  }\n\n  handlePocketFromChange = selectedPocket => {\n    this.props.selectPocketFrom(selectedPocket);\n    this.props.fetchRates(selectedPocket.currency);\n  }\n\n  handlePocketToChange = selectedPocket => {\n    this.props.selectPocketTo(selectedPocket);\n  }\n\n  handleAmountFromChange = (amount) => {\n    this.setState({isFromPersistent: true, amount});\n  }\n\n  handleAmountToChange = (amount) => {\n    this.setState({isFromPersistent: false, amount});\n  }\n\n  render() {\n    const {pockets, exchangeRate, pocketFrom, pocketTo, exchange} = this.props;\n    const {isFromPersistent, amount} = this.state;\n\n    const amountFrom = parseToTwoDecimal(isFromPersistent ? amount : tryConvert(amount, a => a / exchangeRate));\n    const amountTo = parseToTwoDecimal(isFromPersistent ? tryConvert(amount, a => a * exchangeRate) : amount);\n\n    const totalFrom = parseToTwoDecimal(parseFloat(pocketFrom.amount || 0) - (amountFrom || 0));\n    const totalTo = parseToTwoDecimal(parseFloat(pocketTo.amount || 0) + (amountTo || 0));\n\n    const canExchange = amountFrom > 0 &&\n                        amountTo > 0 &&\n                        pocketTo.id !== pocketFrom.id &&\n                        totalFrom > 0;\n\n    return (\n      <div className=\"exchange-widget\">\n        <ExchangePocket\n          isFromPocket\n          pockets={pockets}\n          selectedPocket={pocketFrom}\n          amount={amountFrom.toString()}\n          total={totalFrom}\n          onPocketChange={this.handlePocketFromChange}\n          onValueChange={this.handleAmountFromChange} />\n\n        <div className=\"exchange\">\n          <span className=\"exchange-rate-label\">Exchange rate</span>\n          <div className=\"exchange-rate\">\n            100 {pocketFrom.currency} = {(100 * exchangeRate).toFixed(2)} {pocketTo.currency}\n          </div>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!canExchange}\n            data-testid={exchangeButtonTestId}\n            onClick={() => {\n              exchange({pocketFrom, totalFrom, pocketTo, totalTo});\n            } }>\n            Exchange\n          </Button>\n        </div>\n\n        <ExchangePocket\n          pockets={pockets}\n          selectedPocket={pocketTo}\n          amount={amountTo.toString()}\n          total={totalTo}\n          onPocketChange={this.handlePocketToChange}\n          onValueChange={this.handleAmountToChange} />\n      </div>\n    );\n  }\n}\n\n_ExchangeWidget.propTypes = {\n  pockets: PropTypes.arrayOf(pocketType),\n  exchangeRate: PropTypes.number,\n  pocketFrom: PropTypes.oneOfType([pocketType, PropTypes.shape({})]),\n  pocketTo: PropTypes.oneOfType([pocketType, PropTypes.shape({})]),\n  exchange: PropTypes.func,\n  selectPocketFrom: PropTypes.func,\n  selectPocketTo: PropTypes.func,\n  fetchRates: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  pockets: state.pockets,\n  pocketFrom: state.pocketFrom,\n  pocketTo: state.pocketTo,\n  rates: state.rates,\n  exchangeRate: state.exchangeRate,\n});\n\nexport const mapDispatchToProps = dispatch => bindActionCreators({\n  fetchRates,\n  selectPocketFrom,\n  selectPocketTo,\n  exchange,\n}, dispatch);\n\nconst ExchangeWidget = connect(mapStateToProps, mapDispatchToProps)(_ExchangeWidget);\n\nexport default ExchangeWidget;\n","import React from 'react';\nimport './App.css';\nimport ExchangeWidget from './components/exchange-widget';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ExchangeWidget></ExchangeWidget>\n    </div>\n  );\n}\n\nexport default App;\n","import {createStore, applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {initialPockets} from '../pockets-data';\nimport {\n  EXCHANGE,\n  RECEIVE_RATES,\n  SELECT_POCKET_FROM,\n  SELECT_POCKET_TO,\n} from '../actions';\nimport {getExchangeRate} from '../../utils/helpers';\n\nexport const initialState= {\n  exchangeRate: 1,\n  pockets: initialPockets,\n  // TODO: better to keep pocketFromId and pocketToId instead of objects\n  pocketFrom: {},\n  pocketTo: {},\n};\n\nexport const reducer = (state = initialState, action, storeState) => {\n  switch (action.type) {\n    case SELECT_POCKET_FROM:\n      return {\n        ...state,\n        pocketFrom: action.pocket,\n      };\n\n    case SELECT_POCKET_TO:\n      return {\n        ...state,\n        pocketTo: action.pocket,\n        exchangeRate: getExchangeRate(state.rates, action.pocket.currency),\n      };\n\n    case RECEIVE_RATES:\n      return {\n        ...state,\n        rates: action.rates,\n        // TODO: blow up if there is no exchange rate for this currency\n        exchangeRate: getExchangeRate(action.rates, state.pocketTo.currency),\n      };\n\n    case EXCHANGE:\n      const pocketFrom = {...action.pocketFrom, amount: action.totalFrom};\n      const pocketTo = {...action.pocketTo, amount: action.totalTo};\n      const pockets = state.pockets.map(pocket => pocket.id === pocketFrom.id ?\n        pocketFrom :\n        pocket.id === pocketTo.id ?\n          pocketTo :\n          pocket,\n      );\n\n      return {\n        ...state,\n        pocketFrom,\n        pocketTo,\n        pockets,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\nexport const store = createStore(reducer, initialState, applyMiddleware(thunkMiddleware));\n","export const initialPockets = [\n  {\n    id: '1',\n    name: 'pocket1',\n    currency: 'USD',\n    amount: 134.87,\n  },\n  {\n    id: '2',\n    name: 'pocket2',\n    currency: 'EUR',\n    amount: 14.11,\n  },\n  {\n    id: '3',\n    name: 'pocket3',\n    currency: 'GBP',\n    amount: 412.32,\n  },\n];\n","import 'typeface-roboto';\nimport React from 'react';\nimport {Provider} from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from './store/reducers';\n\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}